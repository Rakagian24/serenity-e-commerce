generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int     @id @default(autoincrement())
  name              String? 
  email             String? @unique
  password          String?
  image             String?
  role              Role     @default(customer)
  email_verified    Boolean  @default(false)
  created_at        DateTime @default(now())
  shipping_name     String?
  shipping_phone    String?
  shipping_address  String?

  accounts          Account[]
  sessions          Session[]
}

model Account {
  id                 Int     @id @default(autoincrement())
  user_id            Int?
  provider           String?
  provider_account_id String?
  access_token       String?
  refresh_token      String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user               User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Session {
  id            Int      @id @default(autoincrement())
  sessionToken  String   @unique
  userId        Int
  expires       DateTime

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String?
  token      String?  @unique
  expires    DateTime?
}

model Product {
  id           Int      @id @default(autoincrement())
  image_url    String
  description  String
  price        Decimal  @db.Decimal(12, 2)
  category     Category
  is_featured  Boolean  @default(false)
  is_active    Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model Cart {
  id         Int      @id @default(autoincrement())
  user_id    Int?
  product_id Int?
  quantity   Int      @default(1)
  created_at DateTime @default(now())
}

model Order {
  id               Int       @id @default(autoincrement())
  user_id          Int?
  total_price      Int?
  status           OrderStatus @default(pending)
  created_at       DateTime @default(now())
  resi             String?
  courier          String?
  delivery_status  DeliveryStatus @default(pending)
  complaint        String?
  shipping_name    String?
  shipping_phone   String?
  shipping_address String?
}

model OrderItem {
  id         Int    @id @default(autoincrement())
  order_id   Int?
  product_id Int?
  quantity   Int?
  price      Int?
}

enum Role {
  admin
  customer
}

enum Category {
  Pria
  Wanita
  Baju
  Jaket
  Celana
  Aksesoris
}

enum OrderStatus {
  pending
  paid
  shipped
  delivered
  cancelled
}

enum DeliveryStatus {
  pending
  shipped
  received
  returned
}
