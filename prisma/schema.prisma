generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["windows"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int?
  type              String
  provider          String
  providerAccountId String
  access_token      String? @db.Text
  refresh_token     String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.Text

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime @db.DateTime(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String
  expires    DateTime @db.DateTime(0)

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id               Int         @id @default(autoincrement())
  name             String?     @db.VarChar(100)
  email            String?     @unique(map: "email") @db.VarChar(255)
  password         String?     @db.VarChar(255)
  image            String?     @db.Text
  role             users_role? @default(customer)
  email_verified   Boolean?    @default(false)
  created_at       DateTime?   @default(now()) @db.DateTime(0)
  shipping_name    String?     @db.VarChar(100)
  shipping_phone   String?     @db.VarChar(20)
  shipping_address String?     @db.Text

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model carts {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  product_id Int?
  quantity   Int?      @default(1)
  created_at DateTime? @default(now()) @db.Timestamp(0)
}

model messages {
  id          Int       @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  message     String    @db.Text
  timestamp   DateTime? @default(now()) @db.DateTime(0)
}

model order_items {
  id         Int  @id @default(autoincrement())
  order_id   Int?
  product_id Int?
  quantity   Int?
  price      Int?
}

model orders {
  id                Int                     @id @default(autoincrement())
  user_id           Int?
  total_price       Int?
  status            orders_status?          @default(pending)
  created_at        DateTime?               @default(now()) @db.Timestamp(0)
  resi              String?                 @db.VarChar(50)
  courier           String?                 @db.VarChar(50)
  delivery_status   orders_delivery_status? @default(pending)
  complaint         String?                 @db.Text
  shipping_name     String?                 @db.VarChar(100)
  shipping_phone    String?                 @db.VarChar(20)
  shipping_address  String?                 @db.Text
  midtrans_order_id String?                 @db.VarChar(100)
}

model products {
  id          Int               @id @default(autoincrement())
  image_url   String            @db.Text
  description String            @db.Text
  price       Decimal           @db.Decimal(12, 2)
  category    products_category
  gender      products_gender   @default(Unisex)
  is_featured Boolean?          @default(false)
  is_active   Boolean?          @default(true)
  created_at  DateTime?         @default(now()) @db.Timestamp(0)
  updated_at  DateTime?         @default(now()) @db.Timestamp(0)
}

enum orders_status {
  pending
  paid
  shipped
  delivered
  cancelled
}

enum users_role {
  admin
  customer
}

enum products_category {
  Baju
  Jaket
  Celana
  Aksesoris
}

enum products_gender {
  Pria
  Wanita
  Unisex
}

enum orders_delivery_status {
  pending
  shipped
  received
  returned
}
